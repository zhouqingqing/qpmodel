with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = date '2001-06-16'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = date '2001-06-16'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = date '2001-06-16'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev  and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev  and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev  and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev  and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev  and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev  and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
Total cost: 2054360.76, memory=1932935
PhysicLimit (100) (inccost=2054360.76, cost=100, rows=100) (actual rows=0)
    Output: ss_items.item_id[0],ss_items.ss_item_rev[1],{ss_items.ss_item_rev/((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3*100(as ss_dev)}[2],cs_items.cs_item_rev[3],{cs_items.cs_item_rev/((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3*100(as cs_dev)}[4],ws_items.ws_item_rev[5],{ws_items.ws_item_rev/((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3*100(as ws_dev)}[6],{((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3(as average)}[7]
    -> PhysicOrder  (inccost=2054260.76, cost=7015.76, rows=1001, memory=65065) (actual rows=0)
        Output: ss_items.item_id[0],ss_items.ss_item_rev[1],{ss_items.ss_item_rev/((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3*100(as ss_dev)}[2],cs_items.cs_item_rev[3],{cs_items.cs_item_rev/((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3*100(as cs_dev)}[4],ws_items.ws_item_rev[5],{ws_items.ws_item_rev/((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3*100(as ws_dev)}[6],{((ss_items.ss_item_rev+cs_items.cs_item_rev)+ws_items.ws_item_rev)/3(as average)}[7]
        Order by: ss_items.item_id[0], ss_items.ss_item_rev[1]
        -> PhysicNLJoin  (inccost=2047245, cost=1022121, rows=1001) (actual rows=0)
            Output: ss_items.item_id[0],ss_items.ss_item_rev[1],ss_items.ss_item_rev[1]/((ss_items.ss_item_rev[1]+cs_items.cs_item_rev[2])+ws_items.ws_item_rev[3])/3*100(as ss_dev),cs_items.cs_item_rev[2],cs_items.cs_item_rev[2]/((ss_items.ss_item_rev[1]+cs_items.cs_item_rev[2])+ws_items.ws_item_rev[3])/3*100(as cs_dev),ws_items.ws_item_rev[3],ws_items.ws_item_rev[3]/((ss_items.ss_item_rev[1]+cs_items.cs_item_rev[2])+ws_items.ws_item_rev[3])/3*100(as ws_dev),((ss_items.ss_item_rev[1]+cs_items.cs_item_rev[2])+ws_items.ws_item_rev[3])/3(as average)
            Filter: (((((((((ss_items.item_id[0]=cs_items.item_id[4] and ss_items.item_id[0]=ws_items.item_id[5]) and ss_items.ss_item_rev[1]>=cs_items.cs_item_rev[2]*0.9) and ss_items.ss_item_rev[1]<=cs_items.cs_item_rev[2]*1.1) and ss_items.ss_item_rev[1]>=ws_items.ws_item_rev[3]*0.9) and ss_items.ss_item_rev[1]<=ws_items.ws_item_rev[3]*1.1) and cs_items.cs_item_rev[2]>=ss_items.ss_item_rev[1]*0.9) and cs_items.cs_item_rev[2]<=ss_items.ss_item_rev[1]*1.1) and ws_items.ws_item_rev[3]>=ss_items.ss_item_rev[1]*0.9) and ws_items.ws_item_rev[3]<=ss_items.ss_item_rev[1]*1.1)
            -> PhysicFromQuery <ss_items> (inccost=1001, cost=1001, rows=1001) (actual rows=21)
                Output: ss_items.item_id[0],ss_items.ss_item_rev[1]
            -> PhysicNLJoin  (inccost=1024123, cost=1022121, rows=1001) (actual rows=0, loops=21)
                Output: cs_items.cs_item_rev[2],ws_items.ws_item_rev[0],cs_items.item_id[3],ws_items.item_id[1]
                Filter: (((cs_items.cs_item_rev[2]>=ws_items.ws_item_rev[0]*0.9 and cs_items.cs_item_rev[2]<=ws_items.ws_item_rev[0]*1.1) and ws_items.ws_item_rev[0]>=cs_items.cs_item_rev[2]*0.9) and ws_items.ws_item_rev[0]<=cs_items.cs_item_rev[2]*1.1)
                -> PhysicFromQuery <ws_items> (inccost=1001, cost=1001, rows=1001) (actual rows=10, loops=21)
                    Output: ws_items.ws_item_rev[1],ws_items.item_id[0]
                -> PhysicFromQuery <cs_items> (inccost=1001, cost=1001, rows=1001) (actual rows=0, loops=210)
                    Output: cs_items.cs_item_rev[1],cs_items.item_id[0]


