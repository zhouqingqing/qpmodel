select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as store_returns_quantitycount
       ,avg(sr_return_quantity) as store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2001Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2001Q1','2001Q2','2001Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2001Q1','2001Q2','2001Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100
Total cost: 148717.1, memory=421818
PhysicLimit (100) (inccost=148717.1, cost=100, rows=100) (actual rows=0)
    Output: item.i_item_id[0],item.i_item_desc[1],store.s_state[2],{count(store_sales.ss_quantity)}[3],{avg(store_sales.ss_quantity)}[4],{stddev_samp(store_sales.ss_quantity)}[5],{stddev_samp(store_sales.ss_quantity)/avg(store_sales.ss_quantity)(as store_sales_quantitycov)}[6],{count(store_returns.sr_return_quantity)}[7],{avg(store_returns.sr_return_quantity)}[8],{stddev_samp(store_returns.sr_return_quantity)}[9],{stddev_samp(store_returns.sr_return_quantity)/avg(store_returns.sr_return_quantity)(as store_returns_quantitycov)}[10],{count(catalog_sales.cs_quantity)}[11],{avg(catalog_sales.cs_quantity)}[12],{stddev_samp(catalog_sales.cs_quantity)}[13],{stddev_samp(catalog_sales.cs_quantity)/avg(catalog_sales.cs_quantity)(as catalog_sales_quantitycov)}[14]
    -> PhysicOrder  (inccost=148617.1, cost=0.1, rows=1, memory=266) (actual rows=0)
        Output: item.i_item_id[0],item.i_item_desc[1],store.s_state[2],{count(store_sales.ss_quantity)}[3],{avg(store_sales.ss_quantity)}[4],{stddev_samp(store_sales.ss_quantity)}[5],{stddev_samp(store_sales.ss_quantity)/avg(store_sales.ss_quantity)(as store_sales_quantitycov)}[6],{count(store_returns.sr_return_quantity)}[7],{avg(store_returns.sr_return_quantity)}[8],{stddev_samp(store_returns.sr_return_quantity)}[9],{stddev_samp(store_returns.sr_return_quantity)/avg(store_returns.sr_return_quantity)(as store_returns_quantitycov)}[10],{count(catalog_sales.cs_quantity)}[11],{avg(catalog_sales.cs_quantity)}[12],{stddev_samp(catalog_sales.cs_quantity)}[13],{stddev_samp(catalog_sales.cs_quantity)/avg(catalog_sales.cs_quantity)(as catalog_sales_quantitycov)}[14]
        Order by: item.i_item_id[0], item.i_item_desc[1], store.s_state[2]
        -> PhysicHashAgg  (inccost=148617, cost=3, rows=1, memory=532) (actual rows=0)
            Output: {item.i_item_id}[0],{item.i_item_desc}[1],{store.s_state}[2],{count(store_sales.ss_quantity)}[3],{avg(store_sales.ss_quantity)}[4],{stddev_samp(store_sales.ss_quantity)}[5],{stddev_samp(store_sales.ss_quantity)}[5]/{avg(store_sales.ss_quantity)}[4](as store_sales_quantitycov),{count(store_returns.sr_return_quantity)}[6],{avg(store_returns.sr_return_quantity)}[7],{stddev_samp(store_returns.sr_return_quantity)}[8],{stddev_samp(store_returns.sr_return_quantity)}[8]/{avg(store_returns.sr_return_quantity)}[7](as store_returns_quantitycov),{count(catalog_sales.cs_quantity)}[9],{avg(catalog_sales.cs_quantity)}[10],{stddev_samp(catalog_sales.cs_quantity)}[11],{stddev_samp(catalog_sales.cs_quantity)}[11]/{avg(catalog_sales.cs_quantity)}[10](as catalog_sales_quantitycov)
            Aggregates: count(store_sales.ss_quantity[3]), avg(store_sales.ss_quantity[3]), stddev_samp(store_sales.ss_quantity[3]), count(store_returns.sr_return_quantity[4]), avg(store_returns.sr_return_quantity[4]), stddev_samp(store_returns.sr_return_quantity[4]), count(catalog_sales.cs_quantity[5]), avg(catalog_sales.cs_quantity[5]), stddev_samp(catalog_sales.cs_quantity[5])
            Group by: item.i_item_id[0], item.i_item_desc[1], store.s_state[2]
            -> PhysicHashJoin  (inccost=148614, cost=2003, rows=1, memory=36) (actual rows=0)
                Output: item.i_item_id[5],item.i_item_desc[6],store.s_state[0],store_sales.ss_quantity[1],store_returns.sr_return_quantity[2],catalog_sales.cs_quantity[3]
                Filter: item.i_item_sk[7]=store_sales.ss_item_sk[4]
                -> PhysicHashJoin  (inccost=144611, cost=5, rows=1, memory=40) (actual rows=0)
                    Output: store.s_state[5],store_sales.ss_quantity[0],store_returns.sr_return_quantity[1],catalog_sales.cs_quantity[2],store_sales.ss_item_sk[3]
                    Filter: store.s_store_sk[6]=store_sales.ss_store_sk[4]
                    -> PhysicHashJoin  (inccost=144604, cost=17100, rows=1, memory=104832) (actual rows=0)
                        Output: store_sales.ss_quantity[6],store_returns.sr_return_quantity[0],catalog_sales.cs_quantity[1],store_sales.ss_item_sk[7],store_sales.ss_store_sk[8]
                        Filter: (((d1.d_date_sk[2]=store_sales.ss_sold_date_sk[9] and store_sales.ss_customer_sk[10]=store_returns.sr_customer_sk[3]) and store_sales.ss_item_sk[7]=store_returns.sr_item_sk[4]) and store_sales.ss_ticket_number[11]=store_returns.sr_ticket_number[5])
                        -> PhysicHashJoin  (inccost=114773, cost=4937, rows=2184, memory=2176) (actual rows=0)
                            Output: store_returns.sr_return_quantity[1],catalog_sales.cs_quantity[2],d1.d_date_sk[3],store_returns.sr_customer_sk[4],store_returns.sr_item_sk[5],store_returns.sr_ticket_number[6]
                            Filter: catalog_sales.cs_sold_date_sk[7]=d3.d_date_sk[0]
                            -> PhysicScanTable date_dim as d3 (inccost=17750, cost=17750, rows=272) (actual rows=274)
                                Output: d3.d_date_sk[0]
                                Filter: d3.d_quarter_name[15] in ('2001Q1','2001Q2','2001Q3')
                            -> PhysicNLJoin  (inccost=92086, cost=3400, rows=2209) (actual rows=1001)
                                Output: store_returns.sr_return_quantity[0],catalog_sales.cs_quantity[1],d1.d_date_sk[6],store_returns.sr_customer_sk[2],store_returns.sr_item_sk[3],store_returns.sr_ticket_number[4],catalog_sales.cs_sold_date_sk[5]
                                -> PhysicHashJoin  (inccost=70936, cost=644, rows=24, memory=9744) (actual rows=11)
                                    Output: store_returns.sr_return_quantity[0],catalog_sales.cs_quantity[1],store_returns.sr_customer_sk[2],store_returns.sr_item_sk[3],store_returns.sr_ticket_number[4],catalog_sales.cs_sold_date_sk[5]
                                    Filter: store_returns.sr_returned_date_sk[6]=d2.d_date_sk[7]
                                    -> PhysicHashJoin  (inccost=52542, cost=31111, rows=174, memory=304192) (actual rows=75)
                                        Output: store_returns.sr_return_quantity[4],catalog_sales.cs_quantity[0],store_returns.sr_customer_sk[5],store_returns.sr_item_sk[6],store_returns.sr_ticket_number[7],catalog_sales.cs_sold_date_sk[1],store_returns.sr_returned_date_sk[8]
                                        Filter: (store_returns.sr_customer_sk[5]=catalog_sales.cs_bill_customer_sk[2] and store_returns.sr_item_sk[6]=catalog_sales.cs_item_sk[3])
                                        -> PhysicScanTable catalog_sales (inccost=9506, cost=9506, rows=9506) (actual rows=9506)
                                            Output: catalog_sales.cs_quantity[18],catalog_sales.cs_sold_date_sk[0],catalog_sales.cs_bill_customer_sk[3],catalog_sales.cs_item_sk[15]
                                        -> PhysicScanTable store_returns (inccost=11925, cost=11925, rows=11925) (actual rows=11925)
                                            Output: store_returns.sr_return_quantity[10],store_returns.sr_customer_sk[3],store_returns.sr_item_sk[2],store_returns.sr_ticket_number[9],store_returns.sr_returned_date_sk[0]
                                    -> PhysicScanTable date_dim as d2 (inccost=17750, cost=17750, rows=272) (actual rows=274)
                                        Output: d2.d_date_sk[0]
                                        Filter: d2.d_quarter_name[15] in ('2001Q1','2001Q2','2001Q3')
                                -> PhysicScanTable date_dim as d1 (inccost=17750, cost=17750, rows=90) (actual rows=91, loops=11)
                                    Output: d1.d_date_sk[0]
                                    Filter: d1.d_quarter_name[15]='2001Q1'
                        -> PhysicScanTable store_sales (inccost=12731, cost=12731, rows=12731) (actual rows=0)
                            Output: store_sales.ss_quantity[10],store_sales.ss_item_sk[2],store_sales.ss_store_sk[7],store_sales.ss_sold_date_sk[0],store_sales.ss_customer_sk[3],store_sales.ss_ticket_number[9]
                    -> PhysicScanTable store (inccost=2, cost=2, rows=2) (actual rows=0)
                        Output: store.s_state[24],store.s_store_sk[0]
                -> PhysicScanTable item (inccost=2000, cost=2000, rows=2000) (actual rows=0)
                    Output: item.i_item_id[1],item.i_item_desc[4],item.i_item_sk[0]


