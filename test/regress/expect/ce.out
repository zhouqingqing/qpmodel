Total cost: 6005
PhysicScanTable lineitem (inccost=6005, cost=6005, rows=3036) (actual rows=3033)
    Output: lineitem.l_orderkey[0],lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_linenumber[3],lineitem.l_quantity[4],lineitem.l_extendedprice[5],lineitem.l_discount[6],lineitem.l_tax[7],lineitem.l_returnflag[8],lineitem.l_linestatus[9],lineitem.l_shipdate[10],lineitem.l_commitdate[11],lineitem.l_receiptdate[12],lineitem.l_shipinstruct[13],lineitem.l_shipmode[14],lineitem.l_comment[15]
    Filter: lineitem.l_extendedprice[5]>25000

Total cost: 1500
PhysicScanTable orders (inccost=1500, cost=1500, rows=915) (actual rows=912)
    Output: orders.o_orderkey[0],orders.o_custkey[1],orders.o_orderstatus[2],orders.o_totalprice[3],orders.o_orderdate[4],orders.o_orderpriority[5],orders.o_clerk[6],orders.o_shippriority[7],orders.o_comment[8]
    Filter: (orders.o_orderdate[4]>='1993-07-01' and orders.o_orderdate[4]<'1997-07-01')

Total cost: 6005
PhysicScanTable lineitem (inccost=6005, cost=6005, rows=1131) (actual rows=1131)
    Output: lineitem.l_orderkey[0],lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_linenumber[3],lineitem.l_quantity[4],lineitem.l_extendedprice[5],lineitem.l_discount[6],lineitem.l_tax[7],lineitem.l_returnflag[8],lineitem.l_linestatus[9],lineitem.l_shipdate[10],lineitem.l_commitdate[11],lineitem.l_receiptdate[12],lineitem.l_shipinstruct[13],lineitem.l_shipmode[14],lineitem.l_comment[15]
    Filter: (lineitem.l_discount[6]>=0.05 and lineitem.l_discount[6]<=0.07)

Total cost: 6005
PhysicScanTable lineitem (inccost=6005, cost=6005, rows=3474) (actual rows=3474)
    Output: lineitem.l_orderkey[0],lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_linenumber[3],lineitem.l_quantity[4],lineitem.l_extendedprice[5],lineitem.l_discount[6],lineitem.l_tax[7],lineitem.l_returnflag[8],lineitem.l_linestatus[9],lineitem.l_shipdate[10],lineitem.l_commitdate[11],lineitem.l_receiptdate[12],lineitem.l_shipinstruct[13],lineitem.l_shipmode[14],lineitem.l_comment[15]
    Filter: lineitem.l_shipmode[14] in ('RAIL','TRUCK','REG AIR','MAIL')

Total cost: 200
PhysicScanTable part (inccost=200, cost=200, rows=1) (actual rows=35)
    Output: part.p_partkey[0],part.p_name[1],part.p_mfgr[2],part.p_brand[3],part.p_type[4],part.p_size[5],part.p_container[6],part.p_retailprice[7],part.p_comment[8]
    Filter: part.p_type[4] like 'MEDIUM%'

Total cost: 22515, memory=414000
PhysicHashJoin  (inccost=22515, cost=15010, rows=6005, memory=414000) (actual rows=6005)
    Output: lineitem.l_orderkey[9],lineitem.l_partkey[10],lineitem.l_suppkey[11],lineitem.l_linenumber[12],lineitem.l_quantity[13],lineitem.l_extendedprice[14],lineitem.l_discount[15],lineitem.l_tax[16],lineitem.l_returnflag[17],lineitem.l_linestatus[18],lineitem.l_shipdate[19],lineitem.l_commitdate[20],lineitem.l_receiptdate[21],lineitem.l_shipinstruct[22],lineitem.l_shipmode[23],lineitem.l_comment[24],orders.o_orderkey[0],orders.o_custkey[1],orders.o_orderstatus[2],orders.o_totalprice[3],orders.o_orderdate[4],orders.o_orderpriority[5],orders.o_clerk[6],orders.o_shippriority[7],orders.o_comment[8]
    Filter: lineitem.l_orderkey[9]=orders.o_orderkey[0]
    -> PhysicScanTable orders (inccost=1500, cost=1500, rows=1500) (actual rows=1500)
        Output: orders.o_orderkey[0],orders.o_custkey[1],orders.o_orderstatus[2],orders.o_totalprice[3],orders.o_orderdate[4],orders.o_orderpriority[5],orders.o_clerk[6],orders.o_shippriority[7],orders.o_comment[8]
    -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=6005) (actual rows=6005)
        Output: lineitem.l_orderkey[0],lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_linenumber[3],lineitem.l_quantity[4],lineitem.l_extendedprice[5],lineitem.l_discount[6],lineitem.l_tax[7],lineitem.l_returnflag[8],lineitem.l_linestatus[9],lineitem.l_shipdate[10],lineitem.l_commitdate[11],lineitem.l_receiptdate[12],lineitem.l_shipinstruct[13],lineitem.l_shipmode[14],lineitem.l_comment[15]

Total cost: 16812, memory=350400
PhysicHashJoin  (inccost=16812, cost=10007, rows=2402, memory=350400) (actual rows=8447)
    Output: lineitem.l_orderkey[5],lineitem.l_partkey[6],lineitem.l_suppkey[7],lineitem.l_linenumber[8],lineitem.l_quantity[9],lineitem.l_extendedprice[10],lineitem.l_discount[11],lineitem.l_tax[12],lineitem.l_returnflag[13],lineitem.l_linestatus[14],lineitem.l_shipdate[15],lineitem.l_commitdate[16],lineitem.l_receiptdate[17],lineitem.l_shipinstruct[18],lineitem.l_shipmode[19],lineitem.l_comment[20],partsupp.ps_partkey[0],partsupp.ps_suppkey[1],partsupp.ps_availqty[2],partsupp.ps_supplycost[3],partsupp.ps_comment[4]
    Filter: (partsupp.ps_suppkey[1]=lineitem.l_suppkey[7] and partsupp.ps_partkey[0]=lineitem.l_partkey[6])
    -> PhysicScanTable partsupp (inccost=800, cost=800, rows=800) (actual rows=800)
        Output: partsupp.ps_partkey[0],partsupp.ps_suppkey[1],partsupp.ps_availqty[2],partsupp.ps_supplycost[3],partsupp.ps_comment[4]
    -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=6005) (actual rows=6005)
        Output: lineitem.l_orderkey[0],lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_linenumber[3],lineitem.l_quantity[4],lineitem.l_extendedprice[5],lineitem.l_discount[6],lineitem.l_tax[7],lineitem.l_returnflag[8],lineitem.l_linestatus[9],lineitem.l_shipdate[10],lineitem.l_commitdate[11],lineitem.l_receiptdate[12],lineitem.l_shipinstruct[13],lineitem.l_shipmode[14],lineitem.l_comment[15]

Total cost: 5762, memory=312432
PhysicHashJoin Left (inccost=5762, cost=4112, rows=1698, memory=312432) (actual rows=1131)
    Output: orders.o_orderkey[0],orders.o_custkey[1],orders.o_orderstatus[2],orders.o_totalprice[3],orders.o_orderdate[4],orders.o_orderpriority[5],orders.o_clerk[6],orders.o_shippriority[7],orders.o_comment[8],customer.c_custkey[9],customer.c_name[10],customer.c_address[11],customer.c_nationkey[12],customer.c_phone[13],customer.c_acctbal[14],customer.c_mktsegment[15],customer.c_comment[16]
    Filter: orders.o_custkey[1]=customer.c_custkey[9]
    -> PhysicScanTable orders (inccost=1500, cost=1500, rows=1132) (actual rows=1131)
        Output: orders.o_orderkey[0],orders.o_custkey[1],orders.o_orderstatus[2],orders.o_totalprice[3],orders.o_orderdate[4],orders.o_orderpriority[5],orders.o_clerk[6],orders.o_shippriority[7],orders.o_comment[8]
        Filter: orders.o_totalprice[3]>50000.01
    -> PhysicScanTable customer (inccost=150, cost=150, rows=150) (actual rows=150)
        Output: customer.c_custkey[0],customer.c_name[1],customer.c_address[2],customer.c_nationkey[3],customer.c_phone[4],customer.c_acctbal[5],customer.c_mktsegment[6],customer.c_comment[7]

Total cost: 4630, memory=69540
PhysicHashJoin  (inccost=4630, cost=2000, rows=800, memory=65600) (actual rows=800)
    Output: partsupp.ps_partkey[9],partsupp.ps_suppkey[10],partsupp.ps_availqty[11],partsupp.ps_supplycost[12],partsupp.ps_comment[13],part.p_partkey[0],part.p_name[1],part.p_mfgr[2],part.p_brand[3],part.p_type[4],part.p_size[5],part.p_container[6],part.p_retailprice[7],part.p_comment[8],supplier.s_suppkey[14],supplier.s_name[15],supplier.s_address[16],supplier.s_nationkey[17],supplier.s_phone[18],supplier.s_acctbal[19],supplier.s_comment[20]
    Filter: partsupp.ps_partkey[9]=part.p_partkey[0]
    -> PhysicScanTable part (inccost=200, cost=200, rows=200) (actual rows=200)
        Output: part.p_partkey[0],part.p_name[1],part.p_mfgr[2],part.p_brand[3],part.p_type[4],part.p_size[5],part.p_container[6],part.p_retailprice[7],part.p_comment[8]
    -> PhysicHashJoin  (inccost=2430, cost=1620, rows=800, memory=3940) (actual rows=800)
        Output: partsupp.ps_partkey[7],partsupp.ps_suppkey[8],partsupp.ps_availqty[9],partsupp.ps_supplycost[10],partsupp.ps_comment[11],supplier.s_suppkey[0],supplier.s_name[1],supplier.s_address[2],supplier.s_nationkey[3],supplier.s_phone[4],supplier.s_acctbal[5],supplier.s_comment[6]
        Filter: supplier.s_suppkey[0]=partsupp.ps_suppkey[8]
        -> PhysicScanTable supplier (inccost=10, cost=10, rows=10) (actual rows=10)
            Output: supplier.s_suppkey[0],supplier.s_name[1],supplier.s_address[2],supplier.s_nationkey[3],supplier.s_phone[4],supplier.s_acctbal[5],supplier.s_comment[6]
        -> PhysicScanTable partsupp (inccost=800, cost=800, rows=800) (actual rows=800)
            Output: partsupp.ps_partkey[0],partsupp.ps_suppkey[1],partsupp.ps_availqty[2],partsupp.ps_supplycost[3],partsupp.ps_comment[4]

Total cost: 12410, memory=1600
PhysicHashAgg  (inccost=12410, cost=6405, rows=200, memory=1600) (actual rows=200)
    Output: {count(*)(0)}[1]
    Aggregates: count(*)(0)
    Group by: lineitem.l_partkey[0]
    -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=6005) (actual rows=6005)
        Output: lineitem.l_partkey[1]

Total cost: 16010, memory=16000
PhysicHashAgg  (inccost=16010, cost=10005, rows=2000, memory=16000) (actual rows=700)
    Output: {count(*)(0)}[2]
    Aggregates: count(*)(0)
    Group by: lineitem.l_partkey[0], lineitem.l_suppkey[1]
    -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=6005) (actual rows=6005)
        Output: lineitem.l_partkey[1],lineitem.l_suppkey[2]

Total cost: 11688, memory=11200
PhysicHashAgg  (inccost=11688, cost=5683, rows=1400, memory=11200) (actual rows=678)
    Output: {count(*)(0)}[2]
    Aggregates: count(*)(0)
    Group by: lineitem.l_partkey[0], lineitem.l_shipmode[1]
    -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=2883) (actual rows=2883)
        Output: lineitem.l_partkey[1],lineitem.l_shipmode[14]
        Filter: lineitem.l_partkey[1]<100

Total cost: 47137.1, memory=13612
PhysicOrder  (inccost=47137.1, cost=0.1, rows=1, memory=4) (actual rows=1500)
    Output: l.l_orderkey[0]
    Order by: l.l_orderkey[0]
    -> PhysicHashAgg  (inccost=47137, cost=6007, rows=1, memory=8) (actual rows=1500)
        Output: {l.l_orderkey}[0]
        Group by: l.l_orderkey[0]
        -> PhysicHashJoin  (inccost=41130, cost=15010, rows=6005, memory=12000) (actual rows=6005)
            Output: l.l_orderkey[1]
            Filter: l.l_orderkey[1]=orders.o_orderkey[0]
            -> PhysicScanTable orders (inccost=1500, cost=1500, rows=1500) (actual rows=1500)
                Output: orders.o_orderkey[0]
            -> PhysicHashJoin  (inccost=24620, cost=12410, rows=6005, memory=1600) (actual rows=6005)
                Output: l.l_orderkey[1]
                Filter: l.l_partkey[2]=part.p_partkey[0]
                -> PhysicScanTable part (inccost=200, cost=200, rows=200) (actual rows=200)
                    Output: part.p_partkey[0]
                -> PhysicFromQuery <l> (inccost=12010, cost=6005, rows=6005) (actual rows=6005)
                    Output: l.l_orderkey[0],l.l_partkey[1]
                    -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=6005) (actual rows=6005)
                        Output: lineitem.l_orderkey[0],lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_linenumber[3],lineitem.l_quantity[4],lineitem.l_extendedprice[5],lineitem.l_discount[6],lineitem.l_tax[7],lineitem.l_returnflag[8],lineitem.l_linestatus[9],lineitem.l_shipdate[10],lineitem.l_commitdate[11],lineitem.l_receiptdate[12],lineitem.l_shipinstruct[13],lineitem.l_shipmode[14],lineitem.l_comment[15]
