select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'GERMANY'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001000000
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'GERMANY'
		)
order by
	value desc
Total cost: 3136.66, memory=47688
PhysicOrder  (inccost=3136.66, cost=358.56, rows=80, memory=960) (actual rows=0)
    Output: ps_partkey[0],{sum(ps_supplycost*ps_availqty)}[1]
    Order by: {sum(ps_supplycost*ps_availqty)}[1]
    -> PhysicHashAgg  (inccost=2778.1, cost=240, rows=80, memory=1920) (actual rows=0)
        Output: {ps_partkey}[0],{sum(ps_supplycost*ps_availqty)}[1]
        Aggregates: sum(ps_supplycost[2]*ps_availqty[3])
        Group by: ps_partkey[0]
        Filter: {sum(ps_supplycost*ps_availqty)}[1]>@1
        <ScalarSubqueryExpr> cached 1
            -> PhysicHashAgg  (inccost=2620.1, cost=82, rows=1, memory=16) (actual rows=0)
                Output: {sum(ps_supplycost*ps_availqty)}[0]*0.0001
                Aggregates: sum(ps_supplycost[1]*ps_availqty[2])
                -> PhysicGather 1 : 10 (inccost=2538.1, cost=8, rows=80) (actual rows=0)
                    Output: {ps_supplycost*ps_availqty}[0],ps_supplycost[1],ps_availqty[2]
                    -> PhysicHashJoin  (inccost=2530.1, cost=1681, rows=80, memory=38400) (actual rows=0)
                        Output: {ps_supplycost*ps_availqty}[0],ps_supplycost[1],ps_availqty[2]
                        Filter: ps_suppkey[3]=s_suppkey[4]
                        -> PhysicScanTable partsupp as partsupp__1 (inccost=800, cost=800, rows=800) (actual rows=0)
                            Output: ps_supplycost[3]*ps_availqty[2],ps_supplycost[3],ps_availqty[2],ps_suppkey[1]
                        -> PhysicRedistribute  (inccost=49.1, cost=0.1, rows=1) (actual rows=0)
                            Output: s_suppkey[0]
                            -> PhysicHashJoin  (inccost=49, cost=13, rows=1, memory=8) (actual rows=0)
                                Output: s_suppkey[1]
                                Filter: s_nationkey[2]=n_nationkey[0]
                                -> PhysicScanTable nation as nation__1 (inccost=25, cost=25, rows=1) (actual rows=0)
                                    Output: n_nationkey[0]
                                    Filter: n_name[1]='GERMANY'
                                -> PhysicRedistribute  (inccost=11, cost=1, rows=10) (actual rows=0)
                                    Output: s_suppkey[0],s_nationkey[1]
                                    -> PhysicScanTable supplier as supplier__1 (inccost=10, cost=10, rows=10) (actual rows=0)
                                        Output: s_suppkey[0],s_nationkey[3]

Emulated 10 machines distributed run with 30 threads
        -> PhysicGather 1 : 10 (inccost=2538.1, cost=8, rows=80) (actual rows=0)
            Output: ps_partkey[0],{ps_supplycost*ps_availqty}[1],ps_supplycost[2],ps_availqty[3]
            -> PhysicHashJoin  (inccost=2530.1, cost=1681, rows=80, memory=44800) (actual rows=0)
                Output: ps_partkey[0],{ps_supplycost*ps_availqty}[1],ps_supplycost[2],ps_availqty[3]
                Filter: ps_suppkey[4]=s_suppkey[5]
                -> PhysicScanTable partsupp (inccost=800, cost=800, rows=800) (actual rows=0)
                    Output: ps_partkey[0],ps_supplycost[3]*ps_availqty[2],ps_supplycost[3],ps_availqty[2],ps_suppkey[1]
                -> PhysicRedistribute  (inccost=49.1, cost=0.1, rows=1) (actual rows=0)
                    Output: s_suppkey[0]
                    -> PhysicHashJoin  (inccost=49, cost=13, rows=1, memory=8) (actual rows=0)
                        Output: s_suppkey[1]
                        Filter: s_nationkey[2]=n_nationkey[0]
                        -> PhysicScanTable nation (inccost=25, cost=25, rows=1) (actual rows=0)
                            Output: n_nationkey[0]
                            Filter: n_name[1]='GERMANY'
                        -> PhysicRedistribute  (inccost=11, cost=1, rows=10) (actual rows=0)
                            Output: s_suppkey[0],s_nationkey[1]
                            -> PhysicScanTable supplier (inccost=10, cost=10, rows=10) (actual rows=0)
                                Output: s_suppkey[0],s_nationkey[3]

Emulated 10 machines distributed run with 30 threads


