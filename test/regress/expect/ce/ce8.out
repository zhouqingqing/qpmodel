Total cost: 4630, memory=69540
PhysicHashJoin  (inccost=4630, cost=2000, rows=800, memory=65600) (actual rows=800)
    Output: partsupp.ps_partkey[9],partsupp.ps_suppkey[10],partsupp.ps_availqty[11],partsupp.ps_supplycost[12],partsupp.ps_comment[13],part.p_partkey[0],part.p_name[1],part.p_mfgr[2],part.p_brand[3],part.p_type[4],part.p_size[5],part.p_container[6],part.p_retailprice[7],part.p_comment[8],supplier.s_suppkey[14],supplier.s_name[15],supplier.s_address[16],supplier.s_nationkey[17],supplier.s_phone[18],supplier.s_acctbal[19],supplier.s_comment[20]
    Filter: partsupp.ps_partkey[9]=part.p_partkey[0]
    -> PhysicScanTable part (inccost=200, cost=200, rows=200) (actual rows=200)
        Output: part.p_partkey[0],part.p_name[1],part.p_mfgr[2],part.p_brand[3],part.p_type[4],part.p_size[5],part.p_container[6],part.p_retailprice[7],part.p_comment[8]
    -> PhysicHashJoin  (inccost=2430, cost=1620, rows=800, memory=3940) (actual rows=800)
        Output: partsupp.ps_partkey[7],partsupp.ps_suppkey[8],partsupp.ps_availqty[9],partsupp.ps_supplycost[10],partsupp.ps_comment[11],supplier.s_suppkey[0],supplier.s_name[1],supplier.s_address[2],supplier.s_nationkey[3],supplier.s_phone[4],supplier.s_acctbal[5],supplier.s_comment[6]
        Filter: supplier.s_suppkey[0]=partsupp.ps_suppkey[8]
        -> PhysicScanTable supplier (inccost=10, cost=10, rows=10) (actual rows=10)
            Output: supplier.s_suppkey[0],supplier.s_name[1],supplier.s_address[2],supplier.s_nationkey[3],supplier.s_phone[4],supplier.s_acctbal[5],supplier.s_comment[6]
        -> PhysicScanTable partsupp (inccost=800, cost=800, rows=800) (actual rows=800)
            Output: partsupp.ps_partkey[0],partsupp.ps_suppkey[1],partsupp.ps_availqty[2],partsupp.ps_supplycost[3],partsupp.ps_comment[4]
